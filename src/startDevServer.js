/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 */

/*
This code is a copy of react-script's start script with minimal modifications.
Exported function allows us to create webpack compiler using customized configuration.
*/

process.on('unhandledRejection', err => {
    throw err;
});

// Ensure environment variables are read.
require('react-scripts/config/env');

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
    choosePort,
    createCompiler,
    prepareProxy,
    prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('react-scripts/config/paths');
const createDevServerConfig = require('react-scripts/config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
    process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

module.exports = function (customWebpackConfig) {
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `detect()` Promise resolves to the next free port.
    return choosePort(HOST, DEFAULT_PORT)
        .then(port => {
            if (port == null) {
                // We have not found a port.
                return;
            }
            const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
            const appName = require(paths.appPackageJson).name;
            const urls = prepareUrls(protocol, HOST, port);

            // This is where we substitute create-react-app's webpack config with the modified version
            const compiler = createCompiler(webpack, customWebpackConfig, appName, urls, useYarn);

            // Load proxy config
            const proxySetting = require(paths.appPackageJson).proxy;
            const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
            // Serve webpack assets generated by the compiler over a web sever.
            const serverConfig = createDevServerConfig(
                proxyConfig,
                urls.lanUrlForConfig
            );
            const devServer = new WebpackDevServer(compiler, serverConfig);
            // Launch WebpackDevServer.
            devServer.listen(port, HOST, err => {
                if (err) {
                    return console.log(err);
                }
                if (isInteractive) {
                    clearConsole();
                }
                console.log(chalk.cyan('Starting the development server...\n'));
                openBrowser(urls.localUrlForBrowser);
            });

            ['SIGINT', 'SIGTERM'].forEach(function (sig) {
                process.on(sig, function () {
                    devServer.close();
                    process.exit();
                });
            });
        })
        .catch(err => {
            if (err && err.message) {
                console.log(err.message);
            }
            process.exit(1);
        });
};
